unit USpace;

interface

uses UxlClasses, UxlWinControl, UxlList, UxlExtClasses, UPageSuper, UPageFactory, UTypeDef, UxlRichEdit, Resource, UBrowseHistory;

type
   TSpace = class (TxlInterfacedObject, ICommandExecutor, ISaver, ILangObserver, IPageObserver)  // single instance
   private
      FHistory: THistory;
      FSelItems: TxlIntList;

      procedure f_TriggerChange (pct: TPageEvent; p: TPageSuper);
		function CanCreateNewPage (pt: TPageType; var o_parent: TPageSuper; var sid: integer): boolean;

      procedure SetActivePage (value: TPageSuper);
      function GetActivePage (): TPageSuper;
      property ActivePage: TPageSuper read GetActivePage write SetActivePage;
		function CheckMove (p1, pp1, p2, pp2: TPageSuper; b_AlwaysAsSibling: boolean; var pparent, pinsbefore: TPageSuper): boolean;
   public
   	constructor Create;
      destructor Destroy (); override;

      function CheckCommand (opr: word): boolean;
      procedure ExecuteCommand (opr: word);
   	procedure OnPageEvent (pct: TPageEvent; id, id2: integer);
      procedure LanguageChanged ();
      procedure Save ();

		function ProcessMoveCopy (sid, tid, pid: integer; b_copy, b_alwaysassibling: boolean): integer;
   end;

implementation

uses Windows, UxlFile, UxlFunctions, UGlobalObj, UxlMath, UxlStrUtils, UPageStore, UxlCommDlgs, UDialogs, UOptionManager,
	ULangManager, UPageProperty, UEditBox, UPropertyBox;

constructor TSpace.Create ();
begin
   FHistory := THistory.Create;
   FSelItems := TxlIntList.Create;
   LangMan.AddObserver (self);
   CommandMan.AddExecutor (self);
   SaveMan.AddObserver (self);
   PageCenter.AddObserver (self);
end;

destructor TSpace.Destroy ();
begin                         
	PageCenter.RemoveObserver (self);
	SaveMan.RemoveObserver (self);
	CommandMan.RemoveExecutor (self);
	LangMan.RemoveObserver (self);
	FSelItems.free;
   FHistory.Free;
	inherited;
end;

procedure TSpace.SetActivePage (value: TPageSuper);
begin
	PageCenter.ActivePage := value;
end;

function TSpace.GetActivePage (): TPageSuper;
begin
	result := PageCenter.ActivePage;
end;

procedure TSpace.LanguageChanged ();
begin
  	TagRoot.Name := LangMan.GetItem (sr_TagRoot);
  	GroupRoot.Name := LangMan.GetItem (sr_GroupRoot);
end;

procedure TSpace.Save ();
begin
	f_TriggerChange (pctSave, ActivePage);
   PageStore.SaveIndex;
end;

//----------------------

procedure TSpace.OnPageEvent (pct: TPageEvent; id, id2: integer);
begin
   case pct of
   	pctSetActive:
      	begin
      		FHistory.Add (id);
   			FSelItems.Clear;
            CommandMan.CheckCommands;
			end;
      pctSelect:
      	begin
				FSelItems.Add (id);
            CommandMan.CheckCommands;
         end;
      pctDeSelect:
      	begin
				FSelItems.DeleteByValue (id);
            CommandMan.CheckCommands;
			end;
   end;
end;

procedure TSpace.f_TriggerChange (pct: TPageEvent; p: TPageSuper);
begin
   if p <> nil then
	   PageCenter.EventNotify (pct, p.id);
end;

//-------------------------

function TSpace.CheckMove (p1, pp1, p2, pp2: TPageSuper; b_AlwaysAsSibling: boolean; var pparent, pinsbefore: TPageSuper): boolean;
var p: TPageSuper;
   i, j: integer;
begin
   result := false;

   // 根级节点不允许相互移动，也不允许增加同级节点
   if pp1 = Root then exit;
   if b_AlwaysAssibling then
       if (p2.Owner = Root) then exit;

   // 不允许从虚拟容器拖入 Owner 容器。如果执行此操作，则视为从虚拟容器中移除该页的链接。
   if (p1.Owner <> pp1) and pp2.CanOwnChild (p1.Pagetype) then
   begin
      pp1.childs.RemoveChild (p1.id);
   	exit;
   end;

   if (p2.CanAddChild (p1.PageType)) and (not b_AlwaysAsSibling) then    // move as child
   begin
//   	if p2.Childs.FindChild (p1.id) >= 0 then exit;  // 已存在该子节点
      pparent := p2;
      pinsbefore := nil;
   end
   else if pp2.CanAddChild (p1.PageType) then   // move as sibling
   begin
      pparent := pp2;
      pinsbefore := p2;
      if pp1 = pp2 then  // 同一父节点下的子节点，区分是上移还是下移。
      begin
      	i := pp2.Childs.FindChild (p1.id);
      	j := pp2.Childs.findChild (p2.id);
         if i < j then      // 从上往下拖动，insert after p2
         begin
            If (j < pp2.Childs.Count - 1) then
            	pinsbefore := PageStore[pp2.Childs.ChildId(j+1)]
            else
         		pinsbefore := nil;
         end;
      end;
   end
   else
   	exit;

   // 不允许自己移给自己，也不允许子节点移到父节点之上
   p := pparent;
   while p <> Root do
   begin
      if p = p1 then exit;
      p := p.Owner;
   end;
   result := true;
end;

function TSpace.ProcessMoveCopy (sid, tid, pid: integer; b_copy, b_alwaysassibling: boolean): integer;
var psource, presult, pinsbefore, pparent, pcurrentparent: TPageSuper;
begin
   psource := PageStore[sid];
   if (ActivePage.Childs <> nil) and (ActivePage.Childs.FindChild (sid) >= 0) then
   	pcurrentparent := ActivePage
   else
   	pcurrentparent := psource.Owner;
   if not CheckMove (psource, pcurrentparent, PageStore[tid], PageStore[pid], b_alwaysassibling, pparent, pinsbefore) then exit;

   result := psource.id;
   if pparent.CanOwnChild (psource.pagetype) then     // 拖入owner类容器。必定从owner-->owner，不允许从virtual-->owner
   begin
      if b_copy then
      begin
         result := PageStore.NewPage (pparent.id, psource.PageType);
         PageStore[result].Clone (psource);
      end
      else
      begin
         pcurrentparent.Childs.RemoveChild (result);
         psource.owner := pparent;
      end;
   end
   else if psource.owner = pcurrentparent then     // owner --> virtual（tag、favorite等虚拟容器），只能为copy
   begin
   	if pparent.Childs.FindChild (psource.id) >= 0 then exit;  // 已存在该链接
   end
   else        // virtual --> virtual
   begin
   	if not b_copy then
      	pcurrentparent.Childs.RemoveChild (result);
   end;

   if pinsbefore = nil then
      pparent.Childs.AddChild (result)
   else
      pparent.Childs.AddChild (result, pinsbefore.id);
end;

//------------------------

function TSpace.CheckCommand (opr: word): boolean;
	function f_Check (pt: TPageType): boolean;
	var o_parent: TPageSuper;
   	sid: integer;
   begin
   	result := CanCreateNewPage (pt, o_parent, sid);
   end;
var b: boolean;
begin
	b := (ActivePage <> nil);
	case opr of
   	m_newnote:
      	result := b and f_Check (ptNote);
      m_newcontact:
      	result := b and f_Check (ptContact);
		m_prior:
      	result := FHistory.HasPrior;
      m_next:
      	result := FHistory.HasNext;
      m_levelup, m_rename:
      	result := b and (ActivePage.Owner <> Root);
      m_deletepage:
      	result := b and ActivePage.CanDelete ();
   	m_property:
      	result := b;
      m_view:
      	result := b and (ActivePage.ListProperty <> nil);
      m_newitem:
      	result := b and (ActivePage.DefChildType <> ptNone);
      m_insertitem:
      	result := b and (ActivePage.DefChildType <> ptNone) and (not FSelItems.IsEmpty);
      m_edititem:
      	result := b and (ActivePage <> RecycleBin) and (not FSelItems.IsEmpty);
      else
         result := true;
	end;
end;

function TSpace.CanCreateNewPage (pt: TPageType; var o_parent: TPageSuper; var sid: integer): boolean;
var b_alwayssibling, b_insertbefore: boolean;
begin
   b_alwayssibling := KeyPressed(VK_SHIFT);
   b_insertbefore := KeyPressed(VK_CONTROL);
   if ActivePage.CanOwnChild (pt) and (not (b_alwayssibling or b_insertbefore)) then   // new child
      o_parent := ActivePage
   else   // new sibling
      o_parent := ActivePage.Owner;
   result := (o_parent <> Root) and o_parent.CanOwnChild (pt);
   if result and b_insertbefore then
   	sid := ActivePage.id;
end;

procedure TSpace.ExecuteCommand (opr: word);
   procedure f_CheckListChange (oldpc: TPageControl);
   begin
      if ActivePage.PageControl <> oldpc then
      begin
         f_TriggerChange (pctControlChange, ActivePage);
         f_TriggerChange (pctListProperty, ActivePage);
         f_TriggerChange (pctSetActive, ActivePage);
      end
      else
         f_TriggerChange (pctListProperty, ActivePage);
   end;
   procedure f_ChangeListStyle (opr: word);
   var p: TListProperty;
   	oldpc: TPageControl;
   begin
		p := ActivePage.ListProperty;
      oldpc := p.PageControl;
      case opr of
         rb_icon: p.View := lpvIcon;
         rb_smallicon: p.View := lpvSmallIcon;
         rb_list: p.View := lpvList;
         rb_report: p.View := lpvReport;
      	else p.View := lpvBlog;
      end;
      f_CheckListChange (oldpc);
   end;
   procedure NewPage (pt: TPageType; b_setactive: boolean; sid: integer = -1);
   var o_parent: TPageSuper;
   	o_box: TEditBoxSuper;
      id: integer;
   begin
		if not CanCreateNewPage (pt, o_parent, sid) then exit;
      o_box := EditBoxFactory.NewEditBox (pt);
      if o_box <> nil then
      begin
      	o_box.ParentPage := o_parent;
      	o_box.ItemId := -1;
         o_box.InsertBeforeId := sid;
         o_box.Execute;
         o_box.free;
      end
      else
      begin
      	id := PageStore.NewPage (o_parent.id, pt);
         o_parent.Childs.AddChild (id, sid);
         if b_setactive then
            ActivePage := PageStore[id];
      end;
   end;
   procedure EditPage (id: integer);
   var o_box: TEditBoxSuper;
   begin
   	o_box := EditBoxFactory.NewEditBox (PageStore[id].PageType);
      if o_box <> nil then
      begin
      	o_box.ParentPage := ActivePage;
         o_box.ItemId := id;
         o_box.Execute;
         o_box.free;
      end
      else
      	ActivePage := PageStore[id];
   end;
   procedure DeletePage (id: integer);
   var o_page: TPageSuper;
   begin
      FHistory.Delete (id);
      o_page := PageStore[id];
      if o_page = ActivePage then
         ActivePage := o_page.Nearest;
      PageCenter.EventNotify (pctDelete, id);
   end;
var p: TPageSuper;
	id, i: integer;
   oldpc: TPageControl;
begin
	if ActivePage = nil then exit;
   if not CheckCommand (opr) then exit;
   case opr of
   	m_newnote: NewPage (ptNote, true);
//      m_newsiblingnote: f_NewSiblingPage (ptNote);
////      m_newgrid: f_NewPage (ptGrid);
      m_newcalc: f_NewPage (ptCalc);
//      m_newmemo: f_NewPage (ptMemo);
      m_newdict: f_NewPage (ptDict);
//      m_newlink: f_NewPage (ptLink);
      m_newcontact: NewPage (ptContact, true);
      m_newgroup: NewPage (ptGroup, true);
//      m_newsiblinggroup: f_NewSiblingPage (ptGroup);
		m_prior:
      	if FHistory.HasPrior then
         	ActivePage := PageStore[FHistory.GetPrior];
      m_next:
      	if FHistory.HasNext then
         	ActivePage := PageStore[FHistory.GetNext];
      m_levelup:
      	if ActivePage.Owner <> nil then
         	ActivePage := ActivePage.Owner;
   	m_rename:
     		f_TriggerChange (pctRenameDemand, ActivePage);
      m_switchlock:
         if ActivePage.Status = psNormal then
            ActivePage.Status := psLocked
         else
            ActivePage.Status := psNormal;
   	m_property:
      	begin
         	f_TriggerChange (pctSave, ActivePage);
            oldpc := ActivePage.PageControl;
            with TPropertyBox.Create () do
            begin
               Page := ActivePage;
               if Execute then
               	if (ActivePage.ListProperty <> nil) then
                  	f_CheckListChange (oldpc);
               Free;
            end;
         end;
		m_deletepage:
      	DeletePage (ActivePage.id);
      m_newitem:
      	NewPage (ActivePage.DefChildType, false);
      m_insertitem:
      	begin
         	FSelItems.GetLast (id);
         	NewPage (ActivePage.DefChildType, false, id);
//            Pages[id].Parent.Childs.InsertChild (p.id, Pages[id]);
         end;
      m_edititem:
      	begin
            FSelItems.GetLast (id);
            EditPage (id);
         end;
      m_delete:
         begin
         	if ShowMessage (LangMan.GetItem(sr_DeleteItemsPrompt), mtQuestion, LangMan.GetItem(sr_Prompt)) = mrCancel then exit;
            for i := FSelItems.Low to FSelItems.High do
               DeletePage (FSelItems[i]);
            FSelItems.Clear;
         end;
      rb_icon, rb_smallicon, rb_list, rb_report, rb_blog:
			f_ChangeListStyle (opr);
   end;
end;

end.










